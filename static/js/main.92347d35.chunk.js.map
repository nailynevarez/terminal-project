{"version":3,"sources":["images/Second-Texture.gif","images/Second-Eagle.gif","images/Second-Button.png","images/Second-Background.jpg","Directions.js","Second.js","Third.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Directions","props","state","isPageActive","className","this","Component","Second","handleButtonClick","setState","isButtonActive","setTimeout","isButtonClicked","isSceneActive","handleSceneSwitch","event","switchSceneFunction","isLoadDone","src","SecondTexture","SecondEagle","onClick","bind","SecondButton","Third","App","switchScene","sceneName","activeScene","component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"gHAAAA,EAAOC,QAAU,IAA0B,4C,kBCA3CD,EAAOC,QAAU,IAA0B,0C,gBCA3CD,EAAOC,QAAU,IAA0B,2C,uECA3CD,EAAOC,QAAU,IAA0B,+C,8HCEtBC,E,kDACnB,WAAYC,GAAO,IAAD,8BAChB,cAAMA,IACDC,MAAQ,CACXC,cAAc,GAHA,E,qDAuBlB,OACE,yBAAKC,UAAaC,KAAKH,MAAMC,aAAe,SAAW,WACvD,yBAAKC,UAAY,4B,GA1BmBE,a,wDCInBC,E,kDACnB,WAAYN,GAAO,IAAD,8BAChB,cAAMA,IAmBRO,kBAAoB,WAClB,EAAKC,SAAS,CACZC,gBAAgB,IAGlBC,YAAW,WACP,EAAKF,SAAS,CACZG,iBAAiB,MAElB,KAGLD,YAAW,WACL,EAAKF,SAAS,CACZI,eAAe,IAEjB,EAAKC,sBACJ,OArCS,EAyClBA,kBAAoB,SAACC,GAEnB,EAAKd,MAAMe,oBADK,UAxChB,EAAKd,MAAQ,CACXe,YAAY,EACZJ,eAAe,EACfD,iBAAiB,EACjBF,gBAAgB,GANF,E,gEAUE,IAAD,OACjBC,YAAW,WACP,EAAKF,SAAS,CACZQ,YAAY,MAEb,Q,+BAkCP,OACE,6BACEZ,KAAKH,MAAMe,WAUb,yBAAKb,UAAaC,KAAKH,MAAMW,cAAgB,sBAAwB,qBACrE,yBAAKT,UAAaC,KAAKH,MAAMW,cAAgB,SAAW,WACtD,yBAAKT,UAAY,sBACjB,yBAAKA,UAAY,iBAAiBc,IAAOC,MACzC,yBAAKf,UAAaC,KAAKH,MAAMU,gBAAkB,mBAAqB,eAAgBM,IAAOE,MAC3F,yBAAKhB,UAAaC,KAAKH,MAAMQ,eAAiB,SAAW,WACvD,yBAAKN,UAAY,oBACf,yBAAKA,UAAY,qBAAqBiB,QAAShB,KAAKG,kBAAkBc,KAAKjB,MAAOa,IAAOK,UAhB7F,yBAAKnB,UAAY,iBACjB,yBAAKA,UAAY,cAAjB,IAA+B,yCAA/B,KACA,yBAAKA,UAAY,gBAAgBc,IAAOC,MACxC,yBAAKf,UAAY,2B,GAxDaE,aCHfkB,E,kDACnB,WAAYvB,GAAO,IAAD,8BAChB,cAAMA,IACDC,MAAQ,CACXW,eAAe,GAHD,E,kGAgClB,OACE,6BACA,4D,GAnC+BP,aC2CpBmB,G,wDAvCb,WAAYxB,GAAO,IAAD,8BAChB,cAAMA,IAMRyB,YAAc,SAACC,GACbhB,YAAW,WACT,EAAKF,SAAS,CACZmB,YAAaD,MAEd,MAVH,EAAKzB,MAAQ,CACX0B,YAAa,UAHC,E,qDAmBlB,IAAIC,EAAY,KACZ,OAAQxB,KAAKH,MAAM0B,aACjB,IAAK,aACHC,EAAY,kBAAC,EAAD,CAAYb,oBAAuBX,KAAKqB,cACpD,MACF,IAAK,SACHG,EAAY,kBAAC,EAAD,CAAQb,oBAAuBX,KAAKqB,cAChD,MACF,IAAK,QACHG,EAAY,kBAAC,EAAD,CAAOb,oBAAuBX,KAAKqB,cAGvD,OACE,yBAAKtB,UAAU,eACdyB,O,GAlCavB,cCMEwB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.92347d35.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/Second-Texture.c40cb5f6.gif\";","module.exports = __webpack_public_path__ + \"static/media/Second-Eagle.59c22b8e.gif\";","module.exports = __webpack_public_path__ + \"static/media/Second-Button.4de95752.png\";","module.exports = __webpack_public_path__ + \"static/media/Second-Background.e4ebbac2.jpg\";","import React, { Component } from 'react';\n\nexport default class Directions extends Component {\n  constructor(props){\n    super(props);\n    this.state = {\n      isPageActive: false,\n    };\n  }\n\n  // handleBeginClick = () => {\n  //   this.setState({\n  //     isPageActive: false,\n  //   });\n  //\n  //   this.handlePageSwitch();\n  // }\n  //\n  // handlePageSwitch = (event) => {\n  //   let pageName = \"directions\";\n  //   this.props.switchPageFunction(pageName);\n  //   }\n\n\n\nrender() {\n  return (\n    <div className = {this.state.isPageActive ? 'fadeIn' : 'fadeOut'}>\n    <div className = \"Directions-Wrapper\">\n\n    </div>\n    </div>\n  );\n}\n}\n","import React, { Component } from 'react';\nimport SecondBackground from \"./images/Second-Background.jpg\";\nimport SecondTexture from \"./images/Second-Texture.gif\";\nimport SecondEagle from \"./images/Second-Eagle.gif\";\nimport SecondButton from \"./images/Second-Button.png\";\n\nexport default class Second extends Component {\n  constructor(props){\n    super(props);\n    this.state = {\n      isLoadDone: false,\n      isSceneActive: true,\n      isButtonClicked: false,\n      isButtonActive: true,\n    };\n  }\n\n  componentDidMount(){\n    setTimeout(() => {\n        this.setState({\n          isLoadDone: true,\n        });\n      }, 3500);\n  }\n\n\n\n  handleButtonClick = () => {\n    this.setState({\n      isButtonActive: false,\n    });\n\n    setTimeout(() => {\n        this.setState({\n          isButtonClicked: true,\n        });\n      }, 1000);\n\n\n    setTimeout(() => {\n          this.setState({\n            isSceneActive: false,\n          });\n          this.handleSceneSwitch();\n        }, 4500);\n\n  }\n\n  handleSceneSwitch = (event) => {\n    let sceneName = \"third\";\n    this.props.switchSceneFunction(sceneName);\n    }\n\n\n\nrender() {\n  return (\n    <div>\n    {!this.state.isLoadDone ? (\n      <div className = \"First-Wrapper\">\n      <div className = \"First-Text\"> <p>LOADING...</p> </div>\n      <img className = \"First-Texture\" src = {SecondTexture}/>\n      <div className = \"First-Background\"></div>\n      </div>\n    )\n    :\n\n    (\n    <div className = {this.state.isSceneActive ? \"Second-WrapperWhite\" : \"Second-WrapperRed\"}>\n    <div className = {this.state.isSceneActive ? 'fadeIn' : 'fadeOut'}>\n      <div className = 'Second-Background'></div>\n      <img className = \"Second-Texture\" src = {SecondTexture}/>\n      <img className = {this.state.isButtonClicked ? 'Second-EagleAway' : 'Second-Eagle'} src = {SecondEagle}/>\n      <div className = {this.state.isButtonActive ? 'fadeIn' : 'fadeOut'}>\n        <div className = 'Second-ButtonDiv'>\n          <img className = \"Second-ButtonImage\" onClick={this.handleButtonClick.bind(this)} src = {SecondButton}/>\n        </div>\n      </div>\n    </div>\n    </div>)}\n    </div>\n  );\n}\n}\n","import React, { Component } from 'react';\n\n\nexport default class Third extends Component {\n  constructor(props){\n    super(props);\n    this.state = {\n      isSceneActive: true,\n    };\n  }\n\n  componentDidMount(){\n  }\n\n\n\n  // handleButtonClick = () => {\n  //   this.setState({\n  //     isButtonClicked: true,\n  //   });\n  //\n  //   setTimeout(() => {\n  //       this.setState({\n  //         isPageActive: false,\n  //       });\n  //     }, 5000);\n  // }\n  //\n  // handlePageSwitch = (event) => {\n  //   let pageName = \"third\";\n  //   this.props.switchPageFunction(pageName);\n  //   }\n\n\n\nrender() {\n  return (\n    <div>\n    <p>This is the third scene.</p>\n    </div>\n  );\n}\n}\n","import React, { Component } from 'react';\nimport Directions from './Directions.js';\nimport Second from './Second.js';\nimport Third from './Third.js';\nimport './sass/main.css';\n\nclass App extends Component {\n  constructor(props){\n    super(props);\n    this.state = {\n      activeScene: 'second',\n    };\n  }\n\n  switchScene = (sceneName) => {\n    setTimeout(() => {\n      this.setState({\n        activeScene: sceneName,\n      });\n    }, 2000);\n  }\n\n\n\nrender() {\n\n  let component = null;\n      switch (this.state.activeScene) {\n        case 'directions':\n          component = <Directions switchSceneFunction = {this.switchScene}/>;\n          break;\n        case 'second':\n          component = <Second switchSceneFunction = {this.switchScene}/>;\n          break;\n        case 'third':\n          component = <Third switchSceneFunction = {this.switchScene}/>;\n          break;\n        }\n  return (\n    <div className=\"App-Wrapper\">\n    {component}\n    </div>\n  );\n}\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}